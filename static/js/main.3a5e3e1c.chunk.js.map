{"version":3,"sources":["imgs/Strumr Logo Small.svg","imgs/Add Media Button.svg","imgs/List Icon.svg","imgs/Send to Top.svg","imgs/Bump Up.svg","imgs/Send Down.svg","imgs/Remove Icon.svg","imgs/Strumr Logo Big.svg","imgs/Setup Playlist Button.svg","redux/reducers/playlist.js","redux/store.js","components/Header.js","redux/ActionCreators.js","components/AddMedia.js","components/Playlist.js","components/Main.js","components/Landing.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","playlist","state","action","type","id","artist","title","duration","timeAdded","thumbnail","filter","song","find","indexUp","findIndex","slice","indexDown","length","store","createStore","combineReducers","Header","props","useState","navbarOpen","setNavbarOpen","Navbar","dark","expand","className","NavbarBrand","href","src","LogoSmall","alt","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","target","rel","nextSongId","AddSong","dispatch","file","setFile","Date","now","inputKey","setInputKey","ref","node","placeholder","key","onChange","event","files","URL","createObjectURL","style","maxHeight","maxWidth","trim","validateArtist","value","validateTitle","includes","durationArr","split","isNaN","Number","validateDuration","addSong","charAt","trimLeadingZero","AddMediaButton","connect","Song","onSendToTopClick","onBumpUpClick","onSendDownClick","onRemoveClick","sendToTopTooltipOpen","setSendToTopTooltipOpen","bumpUpTooltipOpen","setBumpUpTooltipOpen","sendDownTooltipOpen","setSendDownTooltipOpen","removeTooltipOpen","setRemoveTooltipOpen","time","timePassed","Math","floor","formatTime","SendToTopButton","Tooltip","placement","toggle","BumpUpButton","SendDownButton","RemoveButton","PlaylistModal","sendToTop","bumpUp","sendDown","removeSong","setNow","useEffect","setInterval","ListIcon","map","Main","isModalOpen","setIsModalOpen","LogoBig","PlaylistButton","Modal","contentClassName","size","scrollable","AddMedia","Landing","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3a5e3e1c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Strumr Logo Small.c5350c8b.svg\";","module.exports = __webpack_public_path__ + \"static/media/Add Media Button.e85c9907.svg\";","module.exports = __webpack_public_path__ + \"static/media/List Icon.be0fd974.svg\";","module.exports = __webpack_public_path__ + \"static/media/Send to Top.cfef9a9d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Bump Up.a99bee97.svg\";","module.exports = __webpack_public_path__ + \"static/media/Send Down.79380280.svg\";","module.exports = __webpack_public_path__ + \"static/media/Remove Icon.b3cba59d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Strumr Logo Big.2fc22a0e.svg\";","module.exports = __webpack_public_path__ + \"static/media/Setup Playlist Button.e50d617a.svg\";","const playlist = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'ADD_SONG':\r\n            return [\r\n                {\r\n                    id: action.id,\r\n                    artist: action.artist,\r\n                    title: action.title,\r\n                    duration: action.duration,\r\n                    timeAdded: action.timeAdded,\r\n                    thumbnail: action.thumbnail\r\n                },\r\n                ...state\r\n            ]\r\n        case 'REMOVE_SONG':\r\n            return state.filter(song => song.id !== action.id)\r\n        case 'SEND_TO_TOP':\r\n            return [\r\n                state.find(song => song.id === action.id),\r\n                ...state.filter(song => song.id !== action.id)\r\n            ]\r\n        case 'BUMP_UP':\r\n            let indexUp = state.findIndex(song => song.id === action.id)\r\n            if (indexUp === 0) {\r\n                return state\r\n            } else {\r\n                return [\r\n                    ...state.slice(0, indexUp - 1),\r\n                    state[indexUp],\r\n                    state[indexUp - 1],\r\n                    ...state.slice(indexUp + 1)\r\n                ]\r\n            } \r\n        case 'SEND_DOWN':\r\n            let indexDown = state.findIndex(song => song.id === action.id)\r\n            if (indexDown === state.length - 1) {\r\n                return state\r\n            } else {\r\n                return [\r\n                    ...state.slice(0, indexDown),\r\n                    state[indexDown + 1],\r\n                    state[indexDown],\r\n                    ...state.slice(indexDown + 2)\r\n                ]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default playlist\r\n","import {combineReducers, createStore} from 'redux'\r\nimport playlist from './reducers/playlist'\r\n\r\nconst store = createStore(\r\n    combineReducers({\r\n        playlist\r\n    })\r\n)\r\n\r\nexport default store\r\n","import React, { useState } from 'react'\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink\r\n} from 'reactstrap'\r\nimport LogoSmall from '../imgs/Strumr Logo Small.svg'\r\n\r\nconst Header = (props) => {\r\n    const [navbarOpen, setNavbarOpen] = useState(false);\r\n\r\n    const toggle = () => setNavbarOpen(!navbarOpen);\r\n\r\n    return (\r\n        <Navbar dark expand='md'>\r\n            <div className='container navbar-container'>\r\n                <NavbarBrand href='/'>\r\n                    <img src={LogoSmall} alt='Strumr Logo Small' />\r\n                </NavbarBrand>\r\n                <NavbarToggler onClick={toggle} />\r\n                <Collapse isOpen={navbarOpen} navbar>\r\n                    <Nav className='ml-auto' navbar>\r\n                        <NavItem>\r\n                            <NavLink href='/'>\r\n                                <span className='navbar-headings'>\r\n                                    Learn More\r\n                                </span>\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                href='https://discord.com/' target='_blank'\r\n                                rel='noopener noreferrer'\r\n                            >\r\n                                <span className='navbar-headings'>\r\n                                    Discord\r\n                                </span>\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href='/'>\r\n                                <span className='navbar-headings'>\r\n                                    Help\r\n                                </span>\r\n                            </NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                </Collapse>\r\n            </div>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","let nextSongId = 0\r\nexport const addSong = (artist, title, duration, thumbnail) => {\r\n    return {\r\n        type: 'ADD_SONG',\r\n        id: nextSongId++,\r\n        artist,\r\n        title,\r\n        duration,\r\n        thumbnail,\r\n        timeAdded: Date.now()\r\n    }\r\n}\r\n\r\nexport const removeSong = (id) => {\r\n    return {\r\n        type: 'REMOVE_SONG',\r\n        id\r\n    }\r\n}\r\n\r\nexport const sendToTop = (id) => {\r\n    return {\r\n        type: 'SEND_TO_TOP',\r\n        id\r\n    }\r\n}\r\n\r\nexport const bumpUp = (id) => {\r\n    return {\r\n        type: 'BUMP_UP',\r\n        id\r\n    }\r\n}\r\n\r\nexport const sendDown = (id) => {\r\n    return {\r\n        type: 'SEND_DOWN',\r\n        id\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { addSong } from '../redux/ActionCreators'\r\nimport AddMediaButton from '../imgs/Add Media Button.svg'\r\n\r\n// neither presentational nor container component\r\n// not purely presentational bc of dispatch\r\nlet AddSong = ({dispatch}) => {\r\n    const [file, setFile] = useState(null)\r\n    const [inputKey, setInputKey] = useState(Date.now())\r\n    const handleChange = (event) => {\r\n        if (event.target.files[0]) {\r\n            setFile(URL.createObjectURL(event.target.files[0]))\r\n        } else {\r\n            setFile(null)\r\n        }\r\n    }\r\n\r\n    const validateArtist = (artist) => {\r\n        artist = artist.trim()\r\n        if (artist === '' || artist.length > 40) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    const validateTitle = (title) => {\r\n        title = title.trim()\r\n        if (title === '' || title.length > 40) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    const validateDuration = (duration) => {\r\n        if (duration === '') {\r\n            return false\r\n        }\r\n\r\n        if (!duration.includes(':')) {\r\n            return false\r\n        }\r\n\r\n        let durationArr = duration.split(':')\r\n        if (durationArr.length !== 2) {\r\n            return false\r\n        } else if (isNaN(Number(durationArr[0]))) {\r\n            return false\r\n        } else if (isNaN(Number(durationArr[1]))) {\r\n            return false\r\n        } else if (durationArr[0] < 0 || durationArr[0] > 59) {\r\n            return false\r\n        } else if (durationArr[1].length !== 2) {\r\n            return false\r\n        } else if (durationArr[1] < 0 || durationArr[1] > 59) {\r\n            return false\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    const trimLeadingZero = (duration) => {\r\n        if (duration.charAt(0) === '0') {\r\n            let durationArr = duration.split(':')\r\n            durationArr[0] = durationArr[0] - 0\r\n            return durationArr[0] + ':' + durationArr[1]\r\n        } else {\r\n            return duration\r\n        }\r\n    }\r\n\r\n    let artist\r\n    let title\r\n    let duration\r\n    return (\r\n        <div className='container modal-container'>\r\n            <div className='row'>\r\n                <div className='col add-media-headings'>\r\n                    Media Info\r\n                </div>\r\n                <div className='col add-media-placeholders'>\r\n                    <input\r\n                        ref={node => {artist = node}}\r\n                        placeholder={'Artist Name'}\r\n                        className='input-fields'\r\n                    />\r\n                </div>\r\n                <div className='col add-media-placeholders'>\r\n                    <input\r\n                        ref={node => {title = node}}\r\n                        placeholder={'Song Name'}\r\n                        className='input-fields'\r\n                    />\r\n                </div>\r\n                <div className='col add-media-placeholders'>\r\n                    <input\r\n                        ref={node => {duration = node}}\r\n                        placeholder={'Song Duration'}\r\n                        className='input-fields'\r\n                    />\r\n                </div>\r\n                <div className='col add-media-headings'>\r\n                    Thumbnail\r\n                </div>\r\n                <div className='col add-media-placeholders'>\r\n                    <input type='file' key={inputKey} onChange={handleChange} />\r\n                    <img src={file} style={{maxHeight: '42px', maxWidth: '75px'}}/>\r\n                </div>\r\n                <div className='col'>\r\n                    <button onClick={() => {\r\n                        // input validation\r\n                        if (validateArtist(artist.value) && validateTitle(title.value) && validateDuration(duration.value)) {\r\n                            dispatch(addSong(artist.value, title.value, trimLeadingZero(duration.value), file))\r\n                            artist.value = ''\r\n                            title.value = ''\r\n                            duration.value = ''\r\n                            setInputKey(Date.now())\r\n                            setFile(null)\r\n                        }\r\n                    }} className='button'\r\n                    >\r\n                        <img src={AddMediaButton} alt='Add Media' />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n// no args makes component that doesn't subscribe to store and that injects dispatch as prop\r\nAddSong = connect()(AddSong)\r\n\r\nexport default AddSong\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { Tooltip } from 'reactstrap'\r\nimport {\r\n    sendToTop,\r\n    bumpUp,\r\n    sendDown,\r\n    removeSong\r\n} from '../redux/ActionCreators'\r\nimport ListIcon from '../imgs/List Icon.svg'\r\nimport SendToTopButton from '../imgs/Send to Top.svg'\r\nimport BumpUpButton from '../imgs/Bump Up.svg'\r\nimport SendDownButton from '../imgs/Send Down.svg'\r\nimport RemoveButton from '../imgs/Remove Icon.svg'\r\n\r\n// presentational component\r\nconst Playlist = ({\r\n    playlist, onSendToTopClick, onBumpUpClick, onSendDownClick, onRemoveClick, toggle\r\n}) => {\r\n    const [now, setNow] = useState(Date.now())\r\n    // Update now value every minute\r\n    useEffect(() => {\r\n        setInterval(() => setNow(Date.now()), 60000)\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <button onClick={toggle} className='close-button'>\r\n                <img src={ListIcon} alt='List Icon' />\r\n            </button>\r\n            <div className='container playlist-container overflow-auto'>\r\n                <ol className='numbers'>\r\n                    {playlist.map((song) =>\r\n                        <Song\r\n                            {...song}\r\n                            key={song.id}\r\n                            now={now}\r\n                            onSendToTopClick={() => onSendToTopClick(song.id)}\r\n                            onBumpUpClick={() => onBumpUpClick(song.id)}\r\n                            onSendDownClick={() => onSendDownClick(song.id)}\r\n                            onRemoveClick={() => onRemoveClick(song.id)}\r\n                        />\r\n                    )}\r\n                </ol>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// presentational component\r\nconst Song = ({\r\n    artist, title, duration, thumbnail, timeAdded, now, onSendToTopClick, onBumpUpClick,\r\n    onSendDownClick, onRemoveClick\r\n}) => {\r\n    const [sendToTopTooltipOpen, setSendToTopTooltipOpen] = useState(false)\r\n    const [bumpUpTooltipOpen, setBumpUpTooltipOpen] = useState(false)\r\n    const [sendDownTooltipOpen, setSendDownTooltipOpen] = useState(false)\r\n    const [removeTooltipOpen, setRemoveTooltipOpen] = useState(false)\r\n\r\n    const toggleSendToTopTooltip = () => setSendToTopTooltipOpen(!sendToTopTooltipOpen)\r\n    const toggleBumpUpTooltip = () => setBumpUpTooltipOpen(!bumpUpTooltipOpen)\r\n    const toggleSendDownTooltip = () => setSendDownTooltipOpen(!sendDownTooltipOpen)\r\n    const toggleRemoveTooltip = () => setRemoveTooltipOpen(!removeTooltipOpen)\r\n\r\n    const formatTime = (time, now) => {\r\n        let timePassed = now - time // in milliseconds\r\n\r\n        if (timePassed < 60000) { // 1 min\r\n            return 'Just now'\r\n        } else if (timePassed < 120000) { // 2 mins\r\n            return '1 minute ago'\r\n        } else if (timePassed < 3600000) { // 1 hour\r\n            return Math.floor(timePassed / 60000) + ' minutes ago'\r\n        } else if (timePassed < 7200000) { // 2 hours\r\n            return '1 hour ago'\r\n        } else if (timePassed < 86400000) { // 24 hours\r\n            return Math.floor(timePassed / (60000 * 60)) + ' hours ago'\r\n        } else {\r\n            return 'Over a day ago'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <li>\r\n            <div className='row'>\r\n                <div className='col-1'></div>\r\n                <div className='col playlist-song'>\r\n                    <div className='row'>\r\n                        <div className='col-1'>\r\n                            <img\r\n                                src={thumbnail ? thumbnail : 'assets/imgs/music-icon.png'}\r\n                                className='img-fluid thumbnail'\r\n                                alt='Thumbnail'\r\n                            />\r\n                        </div>\r\n                        <div className='col song-name'>\r\n                            {artist} - {title}\r\n                        </div>\r\n                        <div className='col'>\r\n                            <div className='row justify-content-end time-info numbers'>\r\n                                {duration}\r\n                            </div>\r\n                            <div className='row justify-content-end time-info time-added'>\r\n                                {formatTime(timeAdded, now)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='col-2'>\r\n                    <button onClick={onSendToTopClick} id='sendToTop' className='button'>\r\n                        <img src={SendToTopButton} alt='Send to Top' />\r\n                    </button>\r\n                    <Tooltip\r\n                        placement='bottom' isOpen={sendToTopTooltipOpen}\r\n                        target='sendToTop' toggle={toggleSendToTopTooltip}\r\n                    >\r\n                        Send to Top\r\n                    </Tooltip>\r\n                    <button onClick={onBumpUpClick} id='bumpUp' className='button'>\r\n                        <img src={BumpUpButton} alt='Bump Up' />\r\n                    </button>\r\n                    <Tooltip\r\n                        placement='bottom' isOpen={bumpUpTooltipOpen}\r\n                        target='bumpUp' toggle={toggleBumpUpTooltip}\r\n                    >\r\n                        Bump Up\r\n                    </Tooltip>\r\n                    <button onClick={onSendDownClick} id='sendDown' className='button'>\r\n                        <img src={SendDownButton} alt='Send Down' />\r\n                    </button>\r\n                    <Tooltip\r\n                        placement='bottom' isOpen={sendDownTooltipOpen}\r\n                        target='sendDown' toggle={toggleSendDownTooltip}\r\n                    >\r\n                        Send Down\r\n                    </Tooltip>\r\n                    <button onClick={onRemoveClick} id='remove' className='button'>\r\n                        <img src={RemoveButton} alt='Remove' />\r\n                    </button>\r\n                    <Tooltip\r\n                        placement='bottom' isOpen={removeTooltipOpen}\r\n                        target='remove' toggle={toggleRemoveTooltip}\r\n                    >\r\n                        Remove Media\r\n                    </Tooltip>\r\n                </div>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\n// state is from store\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        playlist: state.playlist\r\n    }\r\n}\r\n\r\n// dispatch is from store\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSendToTopClick: (id) => {\r\n            dispatch(sendToTop(id))\r\n        },\r\n        onBumpUpClick: (id) => {\r\n            dispatch(bumpUp(id))\r\n        },\r\n        onSendDownClick: (id) => {\r\n            dispatch(sendDown(id))\r\n        },\r\n        onRemoveClick: (id) => {\r\n            dispatch(removeSong(id))\r\n        }\r\n    }\r\n}\r\n\r\n// generates container component, including subscribing to store\r\nconst PlaylistModal = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Playlist)\r\n// ^2nd function call is presentational component to be connected to store\r\n\r\nexport default PlaylistModal\r\n","import React, { useState } from 'react'\r\nimport { Modal, ModalFooter } from 'reactstrap'\r\nimport AddMedia from './AddMedia'\r\nimport PlaylistModal from './Playlist'\r\nimport LogoBig from '../imgs/Strumr Logo Big.svg'\r\nimport PlaylistButton from '../imgs/Setup Playlist Button.svg'\r\n\r\nconst Main = (props) => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    const toggle = () => setIsModalOpen(!isModalOpen);\r\n\r\n    return (\r\n        <>\r\n            <div className='container main-container'>\r\n                <div className='row'>\r\n                    <div className='col-12'>\r\n                        <img src={LogoBig} alt='Strumr Logo Big' />\r\n                        <br/><br/>\r\n                    </div>\r\n                    <div className='col-12 col-md-6 main-heading'>\r\n                        Safely share\r\n                        <span className='semibold'> any music </span>\r\n                        with your\r\n                        <span className='semibold'> Twitch community.</span>\r\n                    </div>\r\n                    <div className='col-12 main-text'>\r\n                        <br/>\r\n                        Got curious?\r\n                        <span className='semibold'> See how it works</span> !\r\n                        <br/>\r\n                    </div>\r\n                    <div className='col-12'>\r\n                        <br/>\r\n                        <button onClick={toggle} className='button'>\r\n                            <img src={PlaylistButton} alt='Setup Playlist Button' />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Modal\r\n                contentClassName='custom-modal-style'\r\n                size='xl'\r\n                scrollable='true'\r\n                isOpen={isModalOpen}\r\n                toggle={toggle}\r\n            >\r\n                <PlaylistModal toggle={toggle} />\r\n                <AddMedia />\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react'\r\nimport Header from './Header'\r\nimport Main from './Main'\r\n\r\nconst Landing = () => {\r\n    return (\r\n        <div className='container landing'>\r\n            <Header />\r\n            <Main />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Landing\r\n","import React from 'react'\nimport {Provider} from 'react-redux'\nimport store from './redux/store'\nimport Landing from './components/Landing'\nimport './App.css'\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <Landing />\n        </Provider>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}